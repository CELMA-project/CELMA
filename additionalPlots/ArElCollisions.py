import numpy as np
import matplotlib.pylab as plt
import scipy.constants as cst

# Data collected from Christiane Schroeders thesis using
# WebPlotDigitalizer
xy =\
(
(0.030986334691371242, 0.6888168699553365),\
(0.030733504276300838, 0.6611951471088946),\
(0.03040597396586886, 0.6254124606941857),\
(0.06792912689860686, 0.49869332309021663),\
(0.04284637961649196, 0.5758189128562557),\
(0.0424958647228717, 0.5375251607282341),\
(0.054602993917266085, 0.45152116004726706),\
(0.06696869967252761, 0.39376664864107025),\
(0.07933440542778936, 0.33601213723487344),\
(0.09170585732884828, 0.2788853922570047),\
(0.10416924756265988, 0.23180291013238774),\
(0.11671308383763024, 0.19350915800436597),\
(0.1293488584453537, 0.16525966872959597),\
(0.14196739461568564, 0.1351268801698411),\
(0.1609469141833575, 0.09557759518516273),\
(0.18638510162691846, 0.05728384305714096),\
(0.26618264918858814, 0.021052752050769064),\
(0.31220270999922817, 0.01764487715412999),\
(0.4119489056611416, 0.04774179334655204),\
(0.4767010734189914, 0.07837679504896933),\
(0.5350066402071258, 0.10907457339421955),\
(0.5868340022236607, 0.13638241302649745),\
(0.6451343974805777, 0.16651520158625233),\
(0.7099026544466598, 0.19890794928798883),\
(0.7682139673805908, 0.23023349406156735),\
(0.8200671870532126, 0.2603662826213222),\
(0.8654761042144374, 0.29081295439524113),\
(0.9044119881352801, 0.31843467724168306),\
(0.9433861796947698, 0.3502415096103133),\
(0.9823642020181242, 0.3824668529311621),\
(1.0213575473969374, 0.4163662400608863),\
(1.0603508927757506, 0.4502656271906105),\
(1.0993518996822933, 0.48500203622477245),\
(1.1383605681165652, 0.520575467163372),\
(1.1708894994736923, 0.5525915550081114),\
(1.196959762954929, 0.5833521099961945),\
(1.2230357725819634, 0.6147404314126058),\
(1.2491405129379827, 0.6492675849706583),\
(1.2752337610024085, 0.6825392056720543),\
(1.3013270090668339, 0.7158108263734502),\
(1.3274260032770562, 0.7497102135031745),\
(1.3535077590498876, 0.781726301347914),\
(1.3795722763853278, 0.8118590899076689),\
(1.4056310475749705, 0.8413641120390954),\
(1.431695564910411, 0.8714969005988503),\
(1.457777320683242, 0.9035129884435898),\
(1.483853330310276, 0.9349013098600012),\
(1.509940832228905, 0.9675451641330689),\
(1.5360513187307212, 1.0027000841194496),\
(1.562156059086741, 1.037227237677502),\
(1.5882722917343546, 1.0730099240922109),\
(1.6143827782361708, 1.1081648440785916),\
(1.6404932647379875, 1.1433197640649722),\
(1.6666037512398042, 1.178474684051353),\
(1.6927084915958235, 1.2130018376094054),\
(1.718795993514452, 1.2456456918824732),\
(1.7448892415788773, 1.278917312583869),\
(1.7709422666227235, 1.3077945682869676),\
(1.8034884364172414, 1.3416939554166918),\
(1.8424779510321898, 1.3751748315941972),\
(1.9330483528341056, 1.4090361722737197),\
(2.0425434246301757, 1.3973559120617944),\
(2.106764265439991, 1.369943444691462),\
(2.1580917127721824, 1.3426356050591841),\
(2.2093703178650985, 1.3099917507861163),\
(2.2542122819743478, 1.2784988016316503),\
(2.292627182009591, 1.249203034976333),\
(2.3310229282255106, 1.2178147135599218),\
(2.369403351385971, 1.1847523483346352),\
(2.407772282254837, 1.1504344502526922),\
(2.446133551595974, 1.1152795302663114),\
(2.4780974452830575, 1.0855652526587756),\
(2.510057508206276, 1.0554324640990207),\
(2.5484111160196843, 1.0194405222082024),\
(2.5867647238330918, 0.983448580317384),\
(2.6251221624103636, 0.9478751493787845),\
(2.66349109327923, 0.9135572512968415),\
(2.701875347203556, 0.8809133970237737),\
(2.7402710934194756, 0.8495250756073623),\
(2.7786706703992596, 0.81855526514317),\
(2.8170970627260967, 0.7905150313445092),\
(2.8555234550529347, 0.7624747975458483),\
(2.8939690011990953, 0.7365271185082817),\
(2.938834907582498, 0.7076498628051833),\
(2.990136497258602, 0.6775170742454284),\
(3.0414639445907925, 0.6502092346131506),\
(3.0992328213614826, 0.6222736285525445),\
(3.163449448331047, 0.5944007991347712),\
(3.2341140170376805, 0.5666116719074418),\
(3.3112177167244923, 0.5379436716804529),\
(3.388348231758357, 0.5122052481189956),\
(3.4783520287595575, 0.4841650143203349),\
(3.581236769255823, 0.45465999218890807),\
(3.684143057798826, 0.4275090941637123),\
(3.7870594020969737, 0.401456787388091),\
(3.902855444891931, 0.3738036762202326),\
(4.0315392307878115, 0.3454286336597967),\
(4.166699549849241, 0.3202609068513653),\
(4.308336819977733, 0.29834615153517974),\
(4.450014835503695, 0.2808828308925946),\
(4.591712701351502, 0.2655881579115069),\
(4.733418925229558, 0.2512065997352604),\
(4.875131417630303, 0.2375098776626443),\
(5.016848089046172, 0.22426971299244913),\
(5.1585710289847295, 0.21171438442588464),\
(5.300308595476224, 0.20075700676779196),\
(5.442054519997971, 0.19071274391454018),\
(5.583809847303747, 0.18169573521673477),\
(5.7255724878859935, 0.17347770197316525),\
(5.8673393074833635, 0.1657162261320162),\
(6.009111350849642, 0.15852544704389326),\
(6.1508844389697, 0.1514488073063749),\
(6.292664840366227, 0.14517114302309264),\
(6.434445241762756, 0.1388934787398104),\
(6.580527590979344, 0.13303432540874693),\
(6.718020671108748, 0.1279361010817177),\
(6.859810475289308, 0.1226856909538816),\
(7.01449567539224, 0.11754942017665071),\
(7.146625424922615, 0.11346893839251715),\
(7.300676720668752, 0.10951400989404925),\
(7.436032931064172, 0.10574741132407994),\
(7.581709219311104, 0.10248302589677327),\
(7.73318911481306, 0.09934419375513204),\
(7.870487522487883, 0.09645646818482234),\
(8.012302400759195, 0.0939454024715094),\
(8.154117279030505, 0.09143433675819646),\
(8.300803612016429, 0.08895117177503153),\
(8.442618490287739, 0.08644010606171859),\
(8.579561913844435, 0.08390113961825785),\
(8.720089655457203, 0.08164118047627622),\
(8.862337410045228, 0.07946492352473844),\
(9.001289430788315, 0.07723286511290461),\
(9.140241451531404, 0.07500080670107079),\
(9.27919347227449, 0.07276874828923718),\
(9.418866953545432, 0.07109470448036204),\
(9.567129007401038, 0.0685836387670491),\
(9.716112521784495, 0.06663058765669438),\
(9.83972288050143, 0.06535512570707525),\
(9.992596626798157, 0.0635615073404232),\
(10.17309455857524, 0.06105044162711026),\
(10.311238470560202, 0.05997427060711913),\
(10.456747299701046, 0.05853937591379732),\
(10.609621045997775, 0.0567457575471455),\
(10.740400040826856, 0.0560283102004846),\
(10.893273787123583, 0.05423469183383256),\
(11.017605606368368, 0.053517244487171656),\
(11.2690224695727, 0.05100617877385871),\
(11.39980146440178, 0.05028873142719781),\
(11.55267521069851, 0.04849511306054577),\
(11.67517154680012, 0.04849511306054577),\
(11.81698642507143, 0.045984047347232826),\
)

x = np.array([(cst.m_e*(1e6*val[0])**2)/(2*cst.e) for val in xy])
y = np.array([val[1] for val in xy])

# Get the range
# Visual inspection shows that we are almost linear in this regime
start = 0.3
stop  = 9
validRange = np.where(np.logical_and(x>=start, x<=stop))[0]

xfit = x[validRange[0]:validRange[-1]]
yfit = y[validRange[0]:validRange[-1]]

# Must giv a matrix as an input, see lstsq documentation for example
A    = np.vstack((xfit, np.ones(len(xfit)))).T
m, c = np.linalg.lstsq(A, yfit)[0]

print("y = {}x + ({})".format(m, c))

fig, ax = plt.subplots()
# Original data
ax.plot(x, y)
# Fit
ax.plot((start, stop), (m*start + c, m*stop +c))

plt.show()
