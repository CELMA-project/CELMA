#
# Input file for  "divExBAdv/twoNormalGaussians"
#
# x - The radial coordinate (rho)
# y - The height of the cylinder (z)
# z - The azimuthal coordinate (theta)

# Root options
###############################################################################
nout = 0            # Number of output timesteps
timestep = 1e-3     # Time between outputs

dump_format="nc"   # Write NetCDF format files

# Setting the z coordinate
ZMIN = 0.0
ZMAX = 1.0 # dz = 2*pi(ZMAX - ZMIN)/(MZ - 1)

# Number of guard cells
MXG = 1 # If this is changed the self implemented boundaries needs to change
MYG = 0 # If this is changed the self implemented boundaries needs to change

# Number of splittings in x
NXPE = 4
###############################################################################


# Mesh options
###############################################################################
[mesh]
# Number of points
nx = 4096 + 2*MXG
ny = 1
nz = 2^12
# The grid spacing
# As the points are located half between grid points, there will be as many
# line segments as points
# NOTE: We must divide by INNER POINTS (different definition of nx and ny)
dx = geom:Lx/(nx-2*MXG)
# The metrics
g33 = 1/(geom:xl^2)
J = geom:xl
# Puts the boundaries half a step outside the last gridpoints
symmetricGlobalY=true
symmetricGlobalX=true
# Position of the separatrix 
# Points 0 <= x < ixseps1 are inside separatrix, ixseps1 <= x < ngx outside
# --------Non-periodic----------
ixseps1 = -1
ixseps2 = -1
# ------------------------------
###############################################################################


# Solver settings
###############################################################################
[solver]
# In principle it is the same what we set this to (as long as it doesn't raises
# error) as we here are not stepping forward in time)
# PVODE raises an error if no fields are being solved for
# Therefore set to euler solver which does not get this error
type = euler
###############################################################################


# Methods options
###############################################################################
# Methods used for the radial (x) derivative terms
[ddx]
first  = C2 # d/dx (f)
second = C2 # d^2/dx^2 (f)
upwind = U1 # u*d/dx (f)

#Methods used for the axial (y) derivative terms
[ddy]
first  = C2 # d/dy (f)
second = C2 # d^2/dy^2 (f)
upwind = U1 # u*d/dy (f)

#Methods used for the azimuthal (z) derivative terms
[ddz]
first  = FFT # d/dz (f)
second = FTT # d^2/dz^2 (f)
###############################################################################


# Specifying the output
###############################################################################
[output]
floats = false # floats = false => output in double
###############################################################################


# Switches
###############################################################################
[switch]
# Give a warning rather than throwing error when insufficient number of points
warnPoints = true
###############################################################################


# Settings for the variables
###############################################################################
# Geometry
# =============================================================================
[geom]
Lx = 30                     # The length of x from boundary to boundary
xl = x * geom:Lx            # x in range [0,Lx]
# =============================================================================


# The functions to test
# =============================================================================
# *****************************************************************************
[n]
function = 0.923116346386636*exp(-0.00222222222222222*geom:xl^2 + 0.0266666666666667*geom:xl*cos(z))

# Boundaries
bndry_xin   = none                      # Manual boundary found in the code
bndry_xout  = dirichlet_o4(n:function)
bndry_yup   = none                       # Since we are using 2D
bndry_ydown = none                       # Since we are using 2D
# *****************************************************************************

# *****************************************************************************
[phi]
function = 0.932102492359528*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))

# Boundaries
bndry_xin   = none                      # Manual boundary found in the code
bndry_xout  = dirichlet_o4(phi:function)
bndry_yup   = none                       # Since we are using 2D
bndry_ydown = none                       # Since we are using 2D
# *****************************************************************************
# =============================================================================


# The analytic solution
# =============================================================================
[S]
solution = (0.000212113050845421*geom:xl^2*(geom:xl*(-0.0246164359036436*geom:xl*(-0.00444444444444444*geom:xl + 0.0266666666666667*cos(z))*exp(-0.00222222222222222*geom:xl^2 + 0.0266666666666667*geom:xl*cos(z))*sin(z) - 0.0246164359036436*exp(-0.00222222222222222*geom:xl^2 + 0.0266666666666667*geom:xl*cos(z))*sin(z)) + 0.0246164359036436*geom:xl*exp(-0.00222222222222222*geom:xl^2 + 0.0266666666666667*geom:xl*cos(z))*sin(z))*exp(-0.00173611111111111*geom:xl^2 - 0.03125*geom:xl*sin(z + pi/4))*cos(z + pi/4)^2 - 0.0268887202251501*geom:xl*(-0.00444444444444444*geom:xl + 0.0266666666666667*cos(z))*(geom:xl^3*(0.932102492359528*(0.00173611111111111*geom:xl + 0.015625*sin(z + pi/4))^2 - 0.00161823349367974)*exp(-geom:xl*(0.000868055555555556*geom:xl + 0.015625*sin(z + pi/4))) + geom:xl^2*(0.000227564085048713*geom:xl*cos(z + pi/4)^2 + 0.0145641014431176*sin(z + pi/4))*exp(-geom:xl*(0.000868055555555556*geom:xl + 0.015625*sin(z + pi/4))))*exp(-0.00222222222222222*geom:xl^2 + 0.0266666666666667*geom:xl*cos(z))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*cos(z + pi/4) - 0.868815056262843*(-0.00173611111111111*geom:xl - 0.015625*sin(z + pi/4))^2*(geom:xl^3*(-0.0246164359036436*geom:xl*(-0.00444444444444444*geom:xl + 0.0266666666666667*cos(z))*exp(-0.00222222222222222*geom:xl^2 + 0.0266666666666667*geom:xl*cos(z))*sin(z) - 0.0246164359036436*exp(-0.00222222222222222*geom:xl^2 + 0.0266666666666667*geom:xl*cos(z))*sin(z)) - 0.0246164359036436*geom:xl^3*exp(-0.00222222222222222*geom:xl^2 + 0.0266666666666667*geom:xl*cos(z))*sin(z))*exp(-0.00173611111111111*geom:xl^2 - 0.03125*geom:xl*sin(z + pi/4)) + 0.932102492359528*(-0.00173611111111111*geom:xl - 0.015625*sin(z + pi/4))*(0.0492328718072872*geom:xl*(geom:xl^3*(0.932102492359528*(0.00173611111111111*geom:xl + 0.015625*sin(z + pi/4))^2 - 0.00161823349367974)*exp(-geom:xl*(0.000868055555555556*geom:xl + 0.015625*sin(z + pi/4))) + geom:xl^2*(0.000227564085048713*geom:xl*cos(z + pi/4)^2 + 0.0145641014431176*sin(z + pi/4))*exp(-geom:xl*(0.000868055555555556*geom:xl + 0.015625*sin(z + pi/4))))*exp(-0.00222222222222222*geom:xl^2 + 0.0266666666666667*geom:xl*cos(z))*sin(z) - 0.0145641014431176*geom:xl*(geom:xl^3*(0.923116346386636*(0.00444444444444444*geom:xl - 0.0266666666666667*cos(z))^2 - 0.00410273931727394)*exp(geom:xl*(-0.00222222222222222*geom:xl + 0.0266666666666667*cos(z))) + 0.923116346386636*geom:xl^2*(-0.00444444444444444*geom:xl + 0.0266666666666667*cos(z))*exp(-0.00222222222222222*geom:xl^2 + 0.0266666666666667*geom:xl*cos(z)) - geom:xl^2*(0.00065643829076383*geom:xl*sin(z)^2 - 0.0246164359036436*cos(z))*exp(geom:xl*(-0.00222222222222222*geom:xl + 0.0266666666666667*cos(z))))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*cos(z + pi/4))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4)) + 0.923116346386636*(-0.0145641014431176*geom:xl*(geom:xl^3*(8.42829944624862e-6*geom:xl - 0.932102492359528*(0.00173611111111111*geom:xl + 0.015625*sin(z + pi/4))^3 + 7.58546950162376e-5*sin(z + pi/4))*exp(-geom:xl*(0.000868055555555556*geom:xl + 0.015625*sin(z + pi/4))) + geom:xl^2*(0.932102492359528*(0.00173611111111111*geom:xl + 0.015625*sin(z + pi/4))^2 - 0.00161823349367974)*exp(-geom:xl*(0.000868055555555556*geom:xl + 0.015625*sin(z + pi/4))) - 2*geom:xl*(0.000227564085048713*geom:xl*cos(z + pi/4)^2 + 0.0145641014431176*sin(z + pi/4))*exp(-geom:xl*(0.000868055555555556*geom:xl + 0.015625*sin(z + pi/4))) + geom:xl*(geom:xl*(-0.00173611111111111*geom:xl - 0.015625*sin(z + pi/4))*(0.000227564085048713*geom:xl*cos(z + pi/4)^2 + 0.0145641014431176*sin(z + pi/4))*exp(-geom:xl*(0.000868055555555556*geom:xl + 0.015625*sin(z + pi/4))) + 0.000227564085048713*geom:xl*exp(-geom:xl*(0.000868055555555556*geom:xl + 0.015625*sin(z + pi/4)))*cos(z + pi/4)^2 + (0.000227564085048713*geom:xl*cos(z + pi/4)^2 + 0.0145641014431176*sin(z + pi/4))*exp(-geom:xl*(0.000868055555555556*geom:xl + 0.015625*sin(z + pi/4)))))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*cos(z + pi/4) - 0.932102492359528*(-0.00173611111111111*geom:xl - 0.015625*sin(z + pi/4))*(geom:xl^3*(-0.0145641014431176*geom:xl*(0.00173611111111111*geom:xl + 0.015625*sin(z + pi/4))^2 + 7.58546950162376e-5*geom:xl + 0.000455128170097426*sin(z + pi/4))*exp(-geom:xl*(0.000868055555555556*geom:xl + 0.015625*sin(z + pi/4)))*cos(z + pi/4) + geom:xl^2*(-0.0145641014431176*geom:xl*(-0.00173611111111111*geom:xl - 0.015625*sin(z + pi/4))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*cos(z + pi/4) - 0.0145641014431176*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*cos(z + pi/4)) + geom:xl^2*(-3.55568882888614e-6*geom:xl^2*cos(z + pi/4)^2 - 0.000682692255146138*geom:xl*sin(z + pi/4) + 0.0145641014431176)*exp(-geom:xl*(0.000868055555555556*geom:xl + 0.015625*sin(z + pi/4)))*cos(z + pi/4) - 0.0145641014431176*geom:xl^2*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*cos(z + pi/4))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4)))*exp(-0.00222222222222222*geom:xl^2 + 0.0266666666666667*geom:xl*cos(z)))/geom:xl^4
# =============================================================================
##############################################################################
