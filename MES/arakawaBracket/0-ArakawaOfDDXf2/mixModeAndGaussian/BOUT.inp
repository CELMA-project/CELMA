#
# Input file for  "ArakawaOfDDX/mixModeAndGaussian"
#
# x - The radial coordinate (rho)
# y - The height of the cylinder (z)
# z - The azimuthal coordinate (theta)

# Root options
###############################################################################
nout = 0            # Number of output timesteps
timestep = 1e-3     # Time between outputs

dump_format="nc"   # Write NetCDF format files

# Setting the z coordinate
ZMIN = 0.0
ZMAX = 1.0 # dz = 2*pi(ZMAX - ZMIN)/(MZ - 1)

# Number of guard cells
MXG = 1 # If this is changed the self implemented boundaries needs to change
MYG = 0 # Make this 2D

# Number of splittings in x
NXPE = 4
###############################################################################


# Mesh options
###############################################################################
[mesh]
# Number of points
nx = 4096 + 2*MXG
ny = 1
nz = 2^15
# The grid spacing
# As the points are located half between grid points, there will be as many
# line segments as points
# NOTE: We must divide by INNER POINTS (different definition of nx and ny)
dx = geom:Lx/(nx-2*MXG)
# The metrics
g33 = 1/(geom:xl^2)
J = geom:xl
# Puts the boundaries half a step outside the last gridpoints
symmetricGlobalY=true
symmetricGlobalX=true
# Position of the separatrix
# Points 0 <= x < ixseps1 are inside separatrix, ixseps1 <= x < ngx outside
# --------Non-periodic----------
ixseps1 = -1
ixseps2 = -1
# ------------------------------
###############################################################################


# Solver settings
###############################################################################
[solver]
# In principle it is the same what we set this to (as long as it doesn't raises
# error) as we here are not stepping forward in time)
# PVODE raises an error if no fields are being solved for
# Therefore set to euler solver which does not get this error
type = euler
###############################################################################


# Methods options
###############################################################################
# Methods used for the radial (x) derivative terms
[ddx]
first  = C2 # d/dx (f)
second = C2 # d^2/dx^2 (f)
upwind = U1 # u*d/dx (f)

#Methods used for the axial (y) derivative terms
[ddy]
first  = C2 # d/dy (f)
second = C2 # d^2/dy^2 (f)
upwind = U1 # u*d/dy (f)

#Methods used for the azimuthal (z) derivative terms
[ddz]
first  = FFT # d/dz (f)
second = FTT # d^2/dz^2 (f)
###############################################################################


# Specifying the output
###############################################################################
[output]
floats = false # floats = false => output in double
###############################################################################


# Switches
###############################################################################
[switch]
# Give a warning rather than throwing error when insufficient number of points
warnPoints = true
###############################################################################


# Settings for the variables
###############################################################################
# Geometry
# =============================================================================
[geom]
Lx = 30                     # The length of x from boundary to boundary
xl = x * geom:Lx            # x in range [0,Lx]
# =============================================================================


# The potential
# =============================================================================
[phi]
function = 0.000185185185185185*geom:xl^3*(-tanh(0.125*geom:xl) + 1)*(sin(pi*geom:xl/15) + cos(pi*geom:xl/15) + cos(2*pi*geom:xl/15) + cos(pi*geom:xl/5))*cos(2*z) + 60

# Boundaries
bndry_xin   = none                     # Manual boundary found in the code
bndry_xout  = dirichlet_o4(phi:function)
bndry_yup   = none                     # Not used
bndry_ydown = none                     # Not used
# =============================================================================


# The density
# =============================================================================
[n]
function = 37.2840996943811*(geom:xl*cos(z)/60 + 1/2)^2*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)

# Boundaries
bndry_xin   = none                     # Manual boundary found in the code
bndry_xout  = dirichlet_o4(n:function)
bndry_yup   = none                     # Not used
bndry_ydown = none                     # Not used
# =============================================================================

# The analytic solution
# =============================================================================
[S]
solution = (-0.000740740740740741*geom:xl^3*(-tanh(0.125*geom:xl) + 1)*(-pi*sin(pi*geom:xl/15)/15 - 2*pi*sin(2*pi*geom:xl/15)/15 - pi*sin(pi*geom:xl/5)/5 + pi*cos(pi*geom:xl/15)/15)*sin(2*z) - 0.000740740740740741*geom:xl^3*(0.125*tanh(0.125*geom:xl)^2 - 0.125)*(sin(pi*geom:xl/15) + cos(pi*geom:xl/15) + cos(2*pi*geom:xl/15) + cos(pi*geom:xl/5))*sin(2*z) - 0.00222222222222222*geom:xl^2*(-tanh(0.125*geom:xl) + 1)*(sin(pi*geom:xl/15) + cos(pi*geom:xl/15) + cos(2*pi*geom:xl/15) + cos(pi*geom:xl/5))*sin(2*z))*(0.000185185185185185*geom:xl^3*(-tanh(0.125*geom:xl) + 1)*(-pi*sin(pi*geom:xl/15)/15 - 2*pi*sin(2*pi*geom:xl/15)/15 - pi*sin(pi*geom:xl/5)/5 + pi*cos(pi*geom:xl/15)/15)*cos(2*z) + 0.000185185185185185*geom:xl^3*(0.125*tanh(0.125*geom:xl)^2 - 0.125)*(sin(pi*geom:xl/15) + cos(pi*geom:xl/15) + cos(2*pi*geom:xl/15) + cos(pi*geom:xl/5))*cos(2*z) + 0.000555555555555556*geom:xl^2*(-tanh(0.125*geom:xl) + 1)*(sin(pi*geom:xl/15) + cos(pi*geom:xl/15) + cos(2*pi*geom:xl/15) + cos(pi*geom:xl/5))*cos(2*z))^1.0*(37.2840996943811*(-0.00173611111111111*geom:xl - 0.015625*sin(z + pi/4))*(geom:xl*cos(z)/60 + 1/2)^2*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60) + 0.621401661573018*sqrt(2)*pi*(geom:xl*cos(z)/60 + 1/2)^2*(sin(z) + cos(z))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*cos(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60) + 1.24280332314604*(geom:xl*cos(z)/60 + 1/2)*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)*cos(z)) - (0.000185185185185185*geom:xl^3*(-tanh(0.125*geom:xl) + 1)*(-pi*sin(pi*geom:xl/15)/15 - 2*pi*sin(2*pi*geom:xl/15)/15 - pi*sin(pi*geom:xl/5)/5 + pi*cos(pi*geom:xl/15)/15)*cos(2*z) + 0.000185185185185185*geom:xl^3*(0.125*tanh(0.125*geom:xl)^2 - 0.125)*(sin(pi*geom:xl/15) + cos(pi*geom:xl/15) + cos(2*pi*geom:xl/15) + cos(pi*geom:xl/5))*cos(2*z) + 0.000555555555555556*geom:xl^2*(-tanh(0.125*geom:xl) + 1)*(sin(pi*geom:xl/15) + cos(pi*geom:xl/15) + cos(2*pi*geom:xl/15) + cos(pi*geom:xl/5))*cos(2*z))^1.0*(0.621401661573018*sqrt(2)*pi*geom:xl*(geom:xl*cos(z)/60 + 1/2)^2*(-sin(z) + cos(z))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*cos(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60) - 0.582564057724705*geom:xl*(geom:xl*cos(z)/60 + 1/2)^2*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)*cos(z + pi/4) - 1.24280332314604*geom:xl*(geom:xl*cos(z)/60 + 1/2)*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(z)*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60))*(0.00037037037037037*geom:xl^3*(-tanh(0.125*geom:xl) + 1)*(-pi^2*sin(pi*geom:xl/15)/225 - pi^2*cos(pi*geom:xl/15)/225 - 4*pi^2*cos(2*pi*geom:xl/15)/225 - pi^2*cos(pi*geom:xl/5)/25)*cos(2*z) + 4.62962962962963e-5*geom:xl^3*(-0.25*tanh(0.125*geom:xl)^2 + 0.25)*(sin(pi*geom:xl/15) + cos(pi*geom:xl/15) + cos(2*pi*geom:xl/15) + cos(pi*geom:xl/5))*cos(2*z)*tanh(0.125*geom:xl) + 0.000740740740740741*geom:xl^3*(0.125*tanh(0.125*geom:xl)^2 - 0.125)*(-pi*sin(pi*geom:xl/15)/15 - 2*pi*sin(2*pi*geom:xl/15)/15 - pi*sin(pi*geom:xl/5)/5 + pi*cos(pi*geom:xl/15)/15)*cos(2*z) + 0.00222222222222222*geom:xl^2*(-tanh(0.125*geom:xl) + 1)*(-pi*sin(pi*geom:xl/15)/15 - 2*pi*sin(2*pi*geom:xl/15)/15 - pi*sin(pi*geom:xl/5)/5 + pi*cos(pi*geom:xl/15)/15)*cos(2*z) + 0.00222222222222222*geom:xl^2*(0.125*tanh(0.125*geom:xl)^2 - 0.125)*(sin(pi*geom:xl/15) + cos(pi*geom:xl/15) + cos(2*pi*geom:xl/15) + cos(pi*geom:xl/5))*cos(2*z) + 0.00222222222222222*geom:xl*(-tanh(0.125*geom:xl) + 1)*(sin(pi*geom:xl/15) + cos(pi*geom:xl/15) + cos(2*pi*geom:xl/15) + cos(pi*geom:xl/5))*cos(2*z))
# =============================================================================
##############################################################################
