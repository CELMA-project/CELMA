#
# Input file for  "D3DZ2DXCylinder/gaussianWSinAndParabola"
#
# x - The radial coordinate (rho)
# y - The height of the cylinder (z)
# z - The azimuthal coordinate (theta)

# Root options
###############################################################################
nout = 0            # Number of output timesteps
timestep = 1e-3     # Time between outputs

dump_format="nc"   # Write NetCDF format files

# Setting the z coordinate
ZMIN = 0.0
ZMAX = 1.0 # dz = 2*pi(ZMAX - ZMIN)/(MZ - 1)

# Number of guard cells
MXG = 1 # If this is changed the self implemented boundaries needs to change
MYG = 0 # Make this 2D

# Number of splittings in x
NXPE = 4
###############################################################################


# Mesh options
###############################################################################
[mesh]
# Number of points
nx = 4096 + 2*MXG
ny = 1
nz = 2^8
# The grid spacing
# As the points are located half between grid points, there will be as many
# line segments as points
# NOTE: We must divide by INNER POINTS (different definition of nx and ny)
dx = geom:Lx/(nx-2*MXG)
# The metrics
g33 = 1/(geom:xl^2)
J = geom:xl
# Puts the boundaries half a step outside the last gridpoints
symmetricGlobalY=true
symmetricGlobalX=true
# Position of the separatrix (-1 is non periodic, >ny is periodic)
# --------Non-periodic----------
ixseps1 = -1
ixseps2 = -1
# ------------------------------
###############################################################################


# Solver settings
###############################################################################
[solver]
# In principle it is the same what we set this to (as long as it doesn't raises
# error) as we here are not stepping forward in time)
# PVODE raises an error if no fields are being solved for
# Therefore set to euler solver which does not get this error
type = euler
###############################################################################


# Methods options
###############################################################################
# Methods used for the radial (x) derivative terms
[ddx]
first  = C2 # d/dx (f)
second = C2 # d^2/dx^2 (f)
upwind = U1 # u*d/dx (f)

#Methods used for the axial (y) derivative terms
[ddy]
first  = C2 # d/dy (f)
second = C2 # d^2/dy^2 (f)
upwind = U1 # u*d/dy (f)

#Methods used for the azimuthal (z) derivative terms
[ddz]
first  = FFT # d/dz (f)
second = FTT # d^2/dz^2 (f)
###############################################################################


# Specifying the output
###############################################################################
[output]
floats = false # floats = false => output in double
###############################################################################


# Switches
###############################################################################
[switch]
# Give a warning rather than throwing error when insufficient number of points
warnPoints = true
###############################################################################


# Settings for the variables
###############################################################################
# Geometry
# =============================================================================
[geom]
Lx = 30                     # The length of x from boundary to boundary
xl = x * geom:Lx            # x in range [0,Lx]
# =============================================================================


# The function to test
# =============================================================================
[f]
function = 0.932102492359528*(geom:xl*cos(z)/60 + 1/2)^2*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)

# Boundaries
bndry_xin   = none                     # Manual boundary found in the code
bndry_xout  = dirichlet_o4(f:function)
bndry_yup   = none                     # 2D simulation
bndry_ydown = none                     # 2D simulation
# =============================================================================


# The analytic solution
# =============================================================================
[S]
solution = -0.000517834717977515*pi^2*geom:xl^2*(-0.00173611111111111*geom:xl - 0.015625*sin(z + pi/4))*(geom:xl*cos(z)/60 + 1/2)^2*(-sin(z) + cos(z))^2*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60) - 0.000485470048103921*sqrt(2)*pi*geom:xl^2*(-0.00173611111111111*geom:xl - 0.015625*sin(z + pi/4))*(geom:xl*cos(z)/60 + 1/2)^2*(-sin(z) + cos(z))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*cos(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)*cos(z + pi/4) + 0.000227564085048713*geom:xl^2*(-0.00173611111111111*geom:xl - 0.015625*sin(z + pi/4))*(geom:xl*cos(z)/60 + 1/2)^2*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)*cos(z + pi/4)^2 - 0.00103566943595503*sqrt(2)*pi*geom:xl^2*(-0.00173611111111111*geom:xl - 0.015625*sin(z + pi/4))*(geom:xl*cos(z)/60 + 1/2)*(-sin(z) + cos(z))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(z)*cos(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60) + 0.000970940096207841*geom:xl^2*(-0.00173611111111111*geom:xl - 0.015625*sin(z + pi/4))*(geom:xl*cos(z)/60 + 1/2)*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(z)*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)*cos(z + pi/4) + 0.000517834717977515*geom:xl^2*(-0.00173611111111111*geom:xl - 0.015625*sin(z + pi/4))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(z)^2*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60) - 8.63057863295859e-6*sqrt(2)*pi^3*geom:xl^2*(geom:xl*cos(z)/60 + 1/2)^2*(-sin(z) + cos(z))^2*(sin(z) + cos(z))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*cos(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60) + 1.61823349367974e-5*pi^2*geom:xl^2*(geom:xl*cos(z)/60 + 1/2)^2*(-sin(z) + cos(z))*(sin(z) + cos(z))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)*cos(z + pi/4) + 3.79273475081188e-6*sqrt(2)*pi*geom:xl^2*(geom:xl*cos(z)/60 + 1/2)^2*(sin(z) + cos(z))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*cos(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)*cos(z + pi/4)^2 - 1.72611572659172e-5*pi^2*geom:xl^2*(geom:xl*cos(z)/60 + 1/2)*(-sin(z) + cos(z))^2*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)*cos(z) + 3.45223145318344e-5*pi^2*geom:xl^2*(geom:xl*cos(z)/60 + 1/2)*(-sin(z) + cos(z))*(sin(z) + cos(z))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(z)*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60) - 1.61823349367974e-5*sqrt(2)*pi*geom:xl^2*(geom:xl*cos(z)/60 + 1/2)*(-sin(z) + cos(z))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*cos(z)*cos(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)*cos(z + pi/4) + 1.61823349367974e-5*sqrt(2)*pi*geom:xl^2*(geom:xl*cos(z)/60 + 1/2)*(sin(z) + cos(z))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(z)*cos(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)*cos(z + pi/4) + 7.58546950162376e-6*geom:xl^2*(geom:xl*cos(z)/60 + 1/2)*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)*cos(z)*cos(z + pi/4)^2 - 1.72611572659172e-5*sqrt(2)*pi*geom:xl^2*(-sin(z) + cos(z))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(z)*cos(z)*cos(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60) + 8.63057863295859e-6*sqrt(2)*pi*geom:xl^2*(sin(z) + cos(z))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(z)^2*cos(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60) + 1.61823349367974e-5*geom:xl^2*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(z)*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)*cos(z)*cos(z + pi/4) + 0.0155350415393255*sqrt(2)*pi*geom:xl*(-0.00173611111111111*geom:xl - 0.015625*sin(z + pi/4))*(geom:xl*cos(z)/60 + 1/2)^2*(-sin(z) - cos(z))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*cos(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60) + 0.0145641014431176*geom:xl*(-0.00173611111111111*geom:xl - 0.015625*sin(z + pi/4))*(geom:xl*cos(z)/60 + 1/2)^2*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)*sin(z + pi/4) - 0.0310700830786509*geom:xl*(-0.00173611111111111*geom:xl - 0.015625*sin(z + pi/4))*(geom:xl*cos(z)/60 + 1/2)*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)*cos(z) - 0.000517834717977515*pi^2*geom:xl*(geom:xl*cos(z)/60 + 1/2)^2*(-sin(z) - cos(z))*(sin(z) + cos(z))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60) - 0.00103566943595503*pi^2*geom:xl*(geom:xl*cos(z)/60 + 1/2)^2*(-sin(z) + cos(z))^2*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60) - 0.000970940096207841*sqrt(2)*pi*geom:xl*(geom:xl*cos(z)/60 + 1/2)^2*(-sin(z) + cos(z))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*cos(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)*cos(z + pi/4) + 0.00024273502405196*sqrt(2)*pi*geom:xl*(geom:xl*cos(z)/60 + 1/2)^2*(sin(z) + cos(z))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(z + pi/4)*cos(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60) + 0.000455128170097426*geom:xl*(geom:xl*cos(z)/60 + 1/2)^2*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)*cos(z + pi/4)^2 + 0.000517834717977515*sqrt(2)*pi*geom:xl*(geom:xl*cos(z)/60 + 1/2)*(-sin(z) - cos(z))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*cos(z)*cos(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60) - 0.00207133887191006*sqrt(2)*pi*geom:xl*(geom:xl*cos(z)/60 + 1/2)*(-sin(z) + cos(z))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(z)*cos(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60) - 0.000517834717977515*sqrt(2)*pi*geom:xl*(geom:xl*cos(z)/60 + 1/2)*(sin(z) + cos(z))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*cos(z)*cos(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60) + 0.00194188019241568*geom:xl*(geom:xl*cos(z)/60 + 1/2)*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(z)*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)*cos(z + pi/4) + 0.000485470048103921*geom:xl*(geom:xl*cos(z)/60 + 1/2)*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)*sin(z + pi/4)*cos(z) + 0.00103566943595503*geom:xl*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(z)^2*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60) - 0.000517834717977515*geom:xl*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)*cos(z)^2 + 0.0155350415393255*sqrt(2)*pi*(geom:xl*cos(z)/60 + 1/2)^2*(-sin(z) - cos(z))*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*cos(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60) + 0.0145641014431176*(geom:xl*cos(z)/60 + 1/2)^2*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)*sin(z + pi/4) - 0.0310700830786509*(geom:xl*cos(z)/60 + 1/2)*exp(-0.000868055555555556*geom:xl^2 - 0.015625*geom:xl*sin(z + pi/4))*sin(sqrt(2)*pi*geom:xl*(sin(z) + cos(z))/60)*cos(z)
# =============================================================================
##############################################################################
